// Code generated by MockGen. DO NOT EDIT.
// Source: server/http/handlers/book.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	models "github.com/libreria/models"
	reflect "reflect"
)

// MockBookKeeper is a mock of BookKeeper interface
type MockBookKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockBookKeeperMockRecorder
}

// MockBookKeeperMockRecorder is the mock recorder for MockBookKeeper
type MockBookKeeperMockRecorder struct {
	mock *MockBookKeeper
}

// NewMockBookKeeper creates a new mock instance
func NewMockBookKeeper(ctrl *gomock.Controller) *MockBookKeeper {
	mock := &MockBookKeeper{ctrl: ctrl}
	mock.recorder = &MockBookKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBookKeeper) EXPECT() *MockBookKeeperMockRecorder {
	return m.recorder
}

// AddBook mocks base method
func (m *MockBookKeeper) AddBook(ctx context.Context, b *models.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBook", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBook indicates an expected call of AddBook
func (mr *MockBookKeeperMockRecorder) AddBook(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBook", reflect.TypeOf((*MockBookKeeper)(nil).AddBook), ctx, b)
}

// GetBook mocks base method
func (m *MockBookKeeper) GetBook(ctx context.Context, id int) (*models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", ctx, id)
	ret0, _ := ret[0].(*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook
func (mr *MockBookKeeperMockRecorder) GetBook(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockBookKeeper)(nil).GetBook), ctx, id)
}

// GetBooks mocks base method
func (m *MockBookKeeper) GetBooks(ctx context.Context, bs *models.BookSearch, limit, offset int) ([]models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooks", ctx, bs, limit, offset)
	ret0, _ := ret[0].([]models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooks indicates an expected call of GetBooks
func (mr *MockBookKeeperMockRecorder) GetBooks(ctx, bs, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockBookKeeper)(nil).GetBooks), ctx, bs, limit, offset)
}

// UpdateBook mocks base method
func (m *MockBookKeeper) UpdateBook(ctx context.Context, b *models.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook
func (mr *MockBookKeeperMockRecorder) UpdateBook(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBookKeeper)(nil).UpdateBook), ctx, b)
}

// UpdateBookStatus mocks base method
func (m *MockBookKeeper) UpdateBookStatus(ctx context.Context, id, status int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBookStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBookStatus indicates an expected call of UpdateBookStatus
func (mr *MockBookKeeperMockRecorder) UpdateBookStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBookStatus", reflect.TypeOf((*MockBookKeeper)(nil).UpdateBookStatus), ctx, id, status)
}

// RateBook mocks base method
func (m *MockBookKeeper) RateBook(ctx context.Context, id, rate int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RateBook", ctx, id, rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// RateBook indicates an expected call of RateBook
func (mr *MockBookKeeperMockRecorder) RateBook(ctx, id, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RateBook", reflect.TypeOf((*MockBookKeeper)(nil).RateBook), ctx, id, rate)
}

// DeleteBook mocks base method
func (m *MockBookKeeper) DeleteBook(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBook indicates an expected call of DeleteBook
func (mr *MockBookKeeperMockRecorder) DeleteBook(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockBookKeeper)(nil).DeleteBook), ctx, id)
}
